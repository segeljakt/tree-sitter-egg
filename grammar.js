module.exports = grammar({
  name: 'egg',

  extras: $ => [
    $._whitespace,
    $.line_comment,
  ],

  rules: {
    program: $ => repeat($.command),

    _whitespace: $ => /[ \t\r\n]/,
    line_comment: $ => token(seq(';', /.*/)),

    command: $ => choice(
      $.command_set_option,
      $.command_datatype,
      $.command_sort,
      $.command_function,
      $.command_declare,
      $.command_relation,
      $.command_ruleset,
      $.command_rule,
      $.command_rewrite,
      $.command_birewrite,
      $.command_run,
      $.command_simplify,
      $.command_calc,
      $.command_query_extract,
      $.command_check,
      $.command_check_proof,
      $.command_run_schedule,
      $.command_print_stats,
      $.command_push,
      $.command_pop,
      $.command_print_function,
      $.command_print_size,
      $.command_input,
      $.command_output,
      $.command_fail,
      $.command_include,
      $.command_action,
    ),
    command_set_option: $ => seq('(', 'set-option', field('option', $.ident), $._expr, ')'),
    command_datatype: $ => seq('(', 'datatype', field('type_def', $.ident), repeat($.variant), ')'),
    command_sort: $ => seq('(', 'sort', field('type_def', $.ident), optional(seq('(', field('type_use', $.ident), repeat($._expr), ')')), ')'),
    command_function: $ => seq('(', 'function', field('function_def', $.ident), $.schema,
      optional(seq(':cost', $.literal_int)),
      optional(':unextractable'),
      optional(seq(':on_merge', $._actions)),
      optional(seq(':merge', $._expr)),
      optional(seq(':default', $._expr)),
    ')'),
    command_declare: $ => seq('(', 'declare', field('variable_def', $.ident), field('type_use', $.ident), ')'),
    command_relation: $ => seq('(', 'relation', field('function_def', $.ident), $._types, ')'),
    command_ruleset: $ => seq('(', 'ruleset', field('ruleset_def', $.ident), ')'),
    command_rule: $ => seq('(', 'rule', $._facts, $._actions,
      optional(seq(':ruleset', field('ruleset_use', $.ident))),
      optional(seq(':name', $.literal_string)),
    ')'),
    command_rewrite: $ => seq('(', 'rewrite', $._expr, $._expr,
      optional(':subsume'),
      optional(seq(':when', $._facts)),
      optional(seq(':ruleset', field('ruleset_use', $.ident))),
    ')'),
    command_birewrite: $ => seq('(', 'birewrite', $._expr, $._expr,
      optional(seq(':when', $._facts)),
      optional(seq(':ruleset', field('ruleset_use', $.ident))),
    ')'),
    command_run: $ => seq('(', 'run', optional(field('ruleset_use', $.ident)), $.literal_int, optional(seq(':until', repeat($._fact))), ')'),
    command_simplify: $ => seq('(', 'simplify', $._schedule, $._expr, ')'),
    command_calc: $ => seq('(', 'calc', $._sorts, repeat($._expr), ')'),
    command_query_extract: $ => seq('(', 'query-extract', optional(seq(':variants', $.literal_int)), $._expr, ')'),
    command_check: $ => seq('(', 'check', repeat($._fact), ')'),
    command_check_proof: $ => seq('(', 'check-proof', ')'),
    command_run_schedule: $ => seq('(', 'run-schedule', repeat($._schedule), ')'),
    command_print_stats: $ => seq('(', 'print-stats', ')'),
    command_push: $ => seq('(', 'push', optional($.literal_int), ')'),
    command_pop: $ => seq('(', 'pop', optional($.literal_int), ')'),
    command_print_function: $ => seq('(', 'print-function', field('function_use', $.ident), $.literal_int, ')'),
    command_print_size: $ => seq('(', 'print-size', optional(field('function_use', $.ident)), ')'),
    command_input: $ => seq('(', 'input', field('function_use', $.ident), $.literal_string, ')'),
    command_output: $ => seq('(', 'output', $.literal_string, repeat($._expr), ')'),
    command_fail: $ => seq('(', 'fail', $.command, ')'),
    command_include: $ => seq('(', 'include', $.literal_string, ')'),
    command_action: $ => $._action,

    _schedule: $ => choice(
      $.schedule_saturate,
      $.schedule_seq,
      $.schedule_repeat,
      $.schedule_run,
      $.schedule_ident,
    ),
    schedule_saturate: $ => seq('(', 'saturate', repeat($._schedule), ')'),
    schedule_seq: $ => seq('(', 'seq', repeat($._schedule), ')'),
    schedule_repeat: $ => seq('(', 'repeat', $.literal_int, repeat($._schedule), ')'),
    schedule_run: $ => seq('(', 'run', optional(field('ruleset_use', $.ident)), optional(seq(':until', repeat($._fact))), ')'),
    schedule_ident: $ => field('ruleset_use', $.ident),

    _action: $ => choice(
      $.action_let,
      $.action_set,
      $.action_delete,
      $.action_subsume,
      $.action_union,
      $.action_panic,
      $.action_extract,
      $.action_call,
    ),
    action_let: $ => seq('(', 'let', field('variable_def', $.ident), $._expr, ')'),
    action_set: $ => seq('(', 'set', '(', field('function_use', $.ident), repeat($._expr), ')', $._expr, ')'),
    action_delete: $ => seq('(', 'delete', '(', field('function_use', $.ident), repeat($._expr), ')', ')'),
    action_subsume: $ => seq('(', 'subsume', '(', field('function_use', $.ident), repeat($._expr), ')', ')'),
    action_union: $ => seq('(', 'union', $._expr, $._expr, ')'),
    action_panic: $ => seq('(', 'panic', $.literal_string, ')'),
    action_extract: $ => seq('(', 'extract', $._expr, optional($._expr), ')'),
    action_call: $ => $.expr_call,

    _fact: $ => choice(
      $.fact_eq,
      $.fact_call,
    ),
    fact_eq: $ => seq('(', '=', repeat1($._expr), $._expr, ')'),
    fact_call: $ => $.expr_call,

    schema: $ => seq($._types, $._type),

    _expr: $ => choice(
      $.expr_ident,
      $.expr_literal,
      $.expr_call,
    ),
    expr_ident: $ => field('variable_use', $.ident),
    expr_literal: $ => $._literal,
    expr_call: $ => seq('(', field('function_use', $.ident), repeat($._expr), ')'),

    _literal: $ => choice(
      $.literal_unit,
      $.literal_int,
      $.literal_float,
      $.literal_bool,
      $.literal_string,
    ),
    literal_unit: $ => seq('(', ')'),
    literal_int: $ => token.immediate(/(-)?[0-9]+/),
    literal_float: $ => choice(
      'NaN',
      token.immediate(/(-)?[0-9]+\.[0-9]+(e(\+)?(-)?[0-9]+)?/),
      'inf',
      '-inf',
    ),
    literal_bool: $ => choice('true', 'false'),
    literal_string: $ => /("[^"]*")+/,

    variant: $ => seq('(', field('function_def', $.ident), repeat($._type), optional(seq(':cost', $.literal_int)), ')'),

    _type: $ => $.type_ident,
    type_ident: $ => field('type_use', $.ident),

    _sort: $ => $.sort_ident,
    sort_ident: $ => seq('(', field('type_use', $.ident), $._type, ')'),

    ident: $ => choice(
      token.immediate(/[a-zA-Z][a-zA-Z0-9-]*/),
      token.immediate(/[-+*/?!=<>&|^/%_]+/),
    ),

    _actions: $ => seq('(', repeat($._action), ')'),
    _types: $ => seq('(', repeat($._type), ')'),
    _exprs: $ => seq('(', repeat($._expr), ')'),
    _facts: $ => seq('(', repeat($._fact), ')'),
    _sorts: $ => seq('(', repeat($._sort), ')'),
  }
});
